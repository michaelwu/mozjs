SRC_DIR := $(shell pwd)

CONFIGURE_FLAGS := --disable-jemalloc --disable-shared-js
CPPFLAGS := -DJS_USE_CUSTOM_ALLOCATOR=1 -I$(SRC_DIR)/rust_mem

ifneq ($(HOST),$(TARGET))

CC ?= $(TARGET)-gcc
CPP ?= $(TARGET)-gcc -E
CXX ?= $(TARGET)-g++
AR ?= $(TARGET)-ar

CONFIGURE_FLAGS += --target=$(TARGET) --without-intl-api

	ifeq (androideabi,$(findstring androideabi,$(TARGET)))
		CONFIGURE_FLAGS += \
			--with-android-ndk=$(ANDROID_NDK) \
			--with-android-toolchain=$(ANDROID_TOOLCHAIN) \
			$(NULL)
	endif
else

CC ?= gcc
CPP ?= gcc -E
CXX ?= g++
AR ?= ar

endif

ifneq (,$(CARGO_FEATURE_DEBUGMOZJS))
	CONFIGURE_FLAGS += --enable-debug=-g --enable-optimize=-O0 --enable-gczeal
endif

ifneq (,$(CCACHE))
	CONFIGURE_FLAGS += --with-ccache=$(CCACHE)
endif

ifeq ($(MSYSTEM),MINGW64)
	# msys2 sets CC=cc as default. however, there is no `cc.exe`.
	# overwrite it here.
	ifeq ($(CC),cc)
		CC = gcc
		CPP = gcc -E
	endif

	# cargo uses Windows native path. msys2 make unfortunately doesn't understand it.
	OUT_DIR:=$(shell cygpath "$(OUT_DIR)")

	# on windows, SM requires moztools which contains prebuilt libraries like glib and libIDL.
	# we don't need them, so just set / -- configure will check that $(MOZ_TOOLS)/bin exists
	# and that it's in the path.
	MOZ_TOOLS=/

	# This is a mess.  m-c/spidermonkey includes its own copy of virtualenv.py,
	# which doesn't have the fixes needed to make it work with msys2/mingw64.
	# The only way we can successfully build under msys2 is to use the win32-native
	# python.

	ifneq (,$(wildcard c:/python27/python.exe))
	FORCED_PYTHON := "c:/python27/python.exe"
	else ifneq(,$(NATIVE_WIN32_PYTHON))
	FORCED_PYTHON := "$(NATIVE_WIN32_PYTHON)"
	else
	$(message You must either have the Native Win32 python installed in C:/python27, or set NATIVE_WIN32_PYTHON to point to the appropriate python.exe.)
	$(message Download the Python installer from  https://www.python.org/downloads/release/python-2710/)
	$(error Can't find native Win32 python)
	endif

	CONFIGURE_FLAGS += --disable-export-js

endif

.PHONY : all
ifneq (,$(FORCED_PYTHON))
all: $(OUT_DIR)/fake_rustalloc.o
	cd $(OUT_DIR) && \
	PYTHON="$(FORCED_PYTHON)" \
	MOZ_TOOLS="$(MOZ_TOOLS)" CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" AR="$(AR)" CPPFLAGS="$(CPPFLAGS)" LDFLAGS="$(LDFLAGS)" \
	$(SRC_DIR)/mozjs/js/src/configure $(strip $(CONFIGURE_FLAGS))
	cd $(OUT_DIR) && make -f Makefile -j$(NUM_JOBS)
else
all: $(OUT_DIR)/fake_rustalloc.o
	cd $(OUT_DIR) && \
	MOZ_TOOLS="$(MOZ_TOOLS)" CC="$(CC)" CPP="$(CPP)" CXX="$(CXX)" AR="$(AR)" CPPFLAGS="$(CPPFLAGS)" LDFLAGS="$(LDFLAGS)" \
	$(SRC_DIR)/mozjs/js/src/configure $(strip $(CONFIGURE_FLAGS))
	cd $(OUT_DIR) && make -f Makefile -j$(NUM_JOBS)
endif

LDFLAGS := $(OUT_DIR)/fake_rustalloc.o
$(OUT_DIR)/fake_rustalloc.o: rust_mem/fake_rustalloc.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $< -o $@ -c
